#!/bin/bash
#
#    bl-apt-update-check
#    display apt update notifications
#
#    Copyright: 2023 John Crawley <john@bunsenlabs.org>
#               2023 David Wyckoff <sleekmason@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

HELP="bl-apt-update-check is a script to check if package upgrades are available,
and if so, display a notification and system tray icon to the user.
The user can then open a terminal to view the details, and take desired action.
This script can be triggered by an apt update action, or by a timer.

Optional arguments:
    -h | --help    Show this message
"

case $1 in
--help|-h)
    echo "$HELP"
    exit
    ;;
esac

on_exit() {
    echo "quit" >&3
    rm -f "${PIPE}"
    rm -rf "${PIPE%/*}"
    exec 3>&-
    exec 4>&-
    :>"$lockfile" # lockfile only holds pid while script is running
}

# check if pid belongs to an instance of this script, even if run via a symlink
# not perfect but should cover many cases, and error out otherwise
check_pid() {
    local pid=$1
    local script path cmd
    kill -s 0 "$pid" || { echo "${0}: PID ${pid} is not running" >&2 ; exit 1;}
    script=$( readlink -e "$0" ) || { echo "${0}: failed to find path to this script" >&2 ; exit 1;}
    mapfile -d '' -t cmd < "/proc/${pid}/cmdline"
    path=${cmd[-1]} # this script takes no arguments, so it is the last part of the command line
    if [[ $path = /* ]]
    then
        path=$(readlink -e "$path")
    else
        path=$( readlink -e /proc/"${pid}"/cwd/"$path" ) # assume path is relative to working directory
    fi
    [[ "$path" = "$script" ]] || { echo "${0}: PID ${pid} seems to belong to a different process: ${path}" >&2 ; exit 1;}
}

# If there is a previous icon still not closed, kill and replace it if still needed
lockfile='/tmp/bl-apt-update-check-lock'
exec 4<>"$lockfile"
tries=3 # give up if cannot get lock
(( i=1 ))
until flock -n 4 # http://mywiki.wooledge.org/BashFAQ/045
do
    (( i > tries )) && { echo "${0}: failed to kill old process" >&2 ; exit 1;}
    echo "${0}: another instance is running, now killing it" >&2
    oldpid=$(<"$lockfile")
    check_pid "$oldpid"
    kill "$oldpid"
    tail -f /dev/null --pid="$oldpid" # https://forums.bunsenlabs.org/viewtopic.php?pid=114592#p114592
    (( i++ )) # one repetition should be enough in fact
done

printf '%s' "$$" > "$lockfile" # using lockfile to store pid

trap on_exit EXIT

show-upgrades(){
    trap on_exit EXIT
    [[ -p "$PIPE" ]] || { echo "${0}: there is no fifo $PIPE" >&2 ; exit 1;}
    exec 3<> "$PIPE"
    x-terminal-emulator -T 'Available Package Upgrades' -e sh -c 'printf "%s\n" "Available upgrades:"; apt list --upgradeable; printf "\n%s\n"  "Held packages:"; apt-mark showhold; bash;'
    exit
}

dir=$(mktemp --tmpdir --directory "${0##*/}".XXXXXXXX) || { echo "${0}: could not make temp dir" >&2 ; exit 1;}
PIPE="${dir}/yadpipe"
mkfifo "$PIPE" || { echo "${0}: could not make fifo $PIPE" >&2 ; exit 1;}
exec 3<> "$PIPE"

export PIPE
export -f on_exit
export -f show-upgrades

num_upgrades=$(( $( apt list --upgradable 2>/dev/null | wc -l ) - $( apt-mark showhold | wc -l ) -1 ))
if (( num_upgrades > 0 )); then
    notify-send  -t 15000 --urgency low "$num_upgrades Upgrades(s) Currently Available"
    yad --notification --listen --image="software-update-available" \
    --text="Package Upgrades - Right-Click For Options" \
    --menu="Show Available Upgrades!bash -c show-upgrades!applications-other|Quit!quit!application-exit" \
    --command="notify-send  -t 15000 --urgency normal '$num_upgrades Upgrades(s) Currently Available'" <&3
fi
