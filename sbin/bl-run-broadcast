#!/bin/bash
#
#    bl-run-broadcast
#    utility for root to run a command as all current X users
#
#    Copyright: 2023 John Crawley <john@bunsenlabs.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

HELP="bl-run-broadcast is a script for a root process
to run a command for all current X users.

For each user, and each DISPLAY, the command is run in a bash shell,
forked and disowned, so the parent process should not hang,
even if child processes continue running.

Usage: bl-run-broadcast <command> [<arguments>]

Optional arguments:
    -h | --help    Show this message

This script must be run as root.

NOTE Any command and arguments can be passed, but this utility was intended
for relatively short-lived notification applications like notify-send or yad.
Because the spawned processes are disowned, there will be no way to
check their return values on exit.

EXAMPLE:

bl-run-broadcast notify-send 'System Message' 'Something happened that you should know about.'

"

error_exit() {
    echo "$0 error: $1" >&2
    exit 1
}

case $1 in
--help|-h)
    echo "$HELP"
    exit
    ;;
'')
    echo "${0}: no command was passed" >&2
    exit 1
    ;;
esac

command -v "$1" >/dev/null || error_exit "cannot find command $1"

[[ $( id -u ) -eq 0 ]] || error_exit "This script must be run as root."

declare -A displays users
users=()
displays=()

for i in $(users);do # "users" command o/p
    [[ $i = root ]] && continue
    users[$i]=1
done # unique names

for u in "${!users[@]}"; do
    for i in $(ps e -u "$u" | sed -rn 's/.* DISPLAY=(:[0-9]*).*/\1/p');do
        displays[$i]=$u
    done
done

for d in "${!displays[@]}";do
	runuser -l "${displays[$d]}" --shell /usr/bin/bash -c "set -m; DISPLAY=${d} XDG_RUNTIME_DIR=/run/user/$(id -u ${displays[$d]}) $(printf '%q ' "$@" ) >/dev/null 2>&1 & disown; set +m;"
#	runuser -u "${displays[$d]}" -- bash -c "set -m; DISPLAY=${d} $(printf '%q ' "$@" ) >/dev/null 2>&1 & disown; set +m;"
#    sudo -u "${displays[$d]}" DISPLAY="$d" bash -c " $(printf '%q ' "$@" ) & "
done

exit
